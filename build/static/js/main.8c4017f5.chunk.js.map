{"version":3,"sources":["utils/duration/index.js","pomodoro/Focus.js","pomodoro/Break.js","pomodoro/SessionTimer.js","pomodoro/PlayPauseButtons.js","utils/class-names/index.js","pomodoro/StopButton.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","Focus","focusIncrease","focusDecrease","focusDuration","isTimerRunning","className","data-testid","type","onClick","disabled","Break","breakDuration","breakDecrease","breakIncrease","SessionTimer","session","currentProgress","label","givenSeconds","seconds","round","secondsToDuration","timeRemaining","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","PlayPauseButtons","classNameToBoolean","playPause","title","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","StopButton","stopButtonHandler","nextTick","prevState","max","Pomodoro","useState","setIsTimerRunning","setSession","setFocusDuration","setBreakDuration","progressPercent","setProgressPercent","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","min","aria-label","nextState","prevStateSession","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c4017f5.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","\r\nimport React from \"react\"\r\nimport {minutesToDuration} from \"../utils/duration\"\r\n\r\nexport default function Focus({focusIncrease, focusDecrease, focusDuration, isTimerRunning}) {\r\n    return (\r\n      <>\r\n        <div className=\"col\">\r\n            <div className=\"input-group input-group-lg mb-2\">\r\n              <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n                Focus Duration: {minutesToDuration(focusDuration)}\r\n              </span>\r\n              <div className=\"input-group-append\">\r\n                {/* TODO: Implement decreasing focus duration and disable during a focus or break session\r\n                    disabled when isTimerRunning is true */}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  data-testid=\"decrease-focus\"\r\n                  onClick = {focusDecrease}\r\n                  disabled = {isTimerRunning}\r\n                >\r\n                  <span className=\"oi oi-minus\" />\r\n                </button>\r\n                {/* TODO: Implement increasing focus duration  and disable during a focus or break session \r\n                    disabled when isTimerRunning is true */}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  data-testid=\"increase-focus\"\r\n                  onClick = {focusIncrease}\r\n                  disabled = {isTimerRunning}\r\n                >\r\n                  <span className=\"oi oi-plus\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n        </div>\r\n      </>\r\n    )\r\n}","import React from \"react\"\r\nimport {minutesToDuration} from \"../utils/duration\"\r\n\r\nexport default function Break ( {breakDuration, breakDecrease, breakIncrease, isTimerRunning}) {\r\n    return (\r\n      <>        \r\n        <div className=\"col\">\r\n            <div className=\"float-right\">\r\n                <div className=\"input-group input-group-lg mb-2\">\r\n                    <span className=\"input-group-text\" data-testid=\"duration-break\">\r\n                        Break Duration: {minutesToDuration(breakDuration)}\r\n                    </span>\r\n                    <div className=\"input-group-append\">\r\n                        <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary\"\r\n                        data-testid=\"decrease-break\"\r\n                        onClick = {breakDecrease}\r\n                        disabled = {isTimerRunning}\r\n                        >\r\n                        <span className=\"oi oi-minus\" />\r\n                        </button>\r\n                        <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary\"\r\n                        data-testid=\"increase-break\"\r\n                        onClick = {breakIncrease}\r\n                        disabled = {isTimerRunning}\r\n                        >\r\n                        <span className=\"oi oi-plus\" />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n      </>\r\n    )\r\n}","\r\nimport React from \"react\"\r\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\r\n\r\n// Displays information about the current session, or nothing, if session === null\r\n\r\nexport default function SessionTimer({ session, focusDuration, breakDuration, isTimerRunning, currentProgress }) {\r\n\r\n    return (\r\n      <>\r\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\r\n        {session && (\r\n          <div>\r\n            <div className=\"row mb-2\">\r\n              <div className=\"col\">\r\n                {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\r\n                <h2 data-testid=\"session-title\">\r\n                  {`${session.label} for ${session.label === \"Focusing\" ? minutesToDuration(focusDuration) \r\n                                                                        : minutesToDuration(breakDuration)} minutes`}\r\n                </h2>\r\n                {/* TODO: Update message below correctly format the time remaining in the current session */}\r\n                <p className=\"lead\" data-testid=\"session-sub-title\">\r\n                  {`${secondsToDuration(session.timeRemaining)} remaining`}\r\n                </p>\r\n                {/* when pause button interrupts running timer, display 'paused' */}\r\n                {!isTimerRunning && <h3>PAUSED</h3>}\r\n              </div>\r\n            </div>\r\n            <div className=\"row mb-2\">\r\n              <div className=\"col\">\r\n                <div className=\"progress\" style={{ height: \"20px\" }}>\r\n                  <div\r\n                    className=\"progress-bar\"\r\n                    role=\"progressbar\"\r\n                    aria-valuemin=\"0\"\r\n                    aria-valuemax=\"100\"\r\n                    aria-valuenow={currentProgress} // TODO: Increase aria-valuenow as elapsed time increases, use currentProgress prop\r\n                    style={{ width: `${currentProgress}%` }} // TODO: Increase width % as elapsed time increases, use currentProgress prop\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </>\r\n    )\r\n}","\r\nimport React from \"react\";\r\nimport classNames from \"../utils/class-names\";\r\n\r\nexport default function PlayPauseButtons ({ playPause, isTimerRunning }) {\r\n    return (\r\n      <>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          data-testid=\"play-pause\"\r\n          title=\"Start or pause timer\"\r\n          onClick={playPause}\r\n        >\r\n          <span\r\n            className={classNames({\r\n              oi: true,\r\n              \"oi-media-play\": !isTimerRunning,\r\n              \"oi-media-pause\": isTimerRunning,\r\n            })}\r\n          />\r\n        </button>\r\n      </>\r\n    )\r\n}","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React from \"react\";\r\n\r\nexport default function StopButton ({ isTimerRunning, stopButtonHandler }) {\r\n    return (\r\n        <>\r\n        {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\r\n        {/* TODO: Disable the stop button when there is no active session */}\r\n            <button\r\n                type=\"button\"\r\n                className=\"btn btn-secondary\"\r\n                data-testid=\"stop\"\r\n                title=\"Stop the session\"\r\n                disabled={!isTimerRunning}\r\n                onClick={stopButtonHandler}\r\n              >\r\n            <span className=\"oi oi-media-stop\" />\r\n            </button>\r\n        </>\r\n    )\r\n}","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport SessionTimer from \"./SessionTimer\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport PlayPauseButtons from \"./PlayPauseButtons\";\nimport StopButton from \"./StopButton\";\n\n// These functions are defined outside of the component to ensure they do not have access to state\n// and are, therefore, more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher-order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  //track the progress value for the progress bar\n  const [progressPercent, setProgressPercent] = useState(0);\n\n  const focusDecrease = () => {\n    setFocusDuration(Math.max(5, focusDuration - 5));\n  };\n  const focusIncrease = () => {\n    setFocusDuration(Math.min(60, focusDuration + 5));\n  };\n\n  const breakDecrease = () => {\n    setBreakDuration(Math.max(1, breakDuration - 1));\n  };\n  const breakIncrease = () => {\n    setBreakDuration(Math.min(15, breakDuration + 1));\n  };\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You won't need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      setProgressPercent(100 - (100 * session.timeRemaining / (session.label === \"Focusing\" ? (focusDuration * 60) : (breakDuration * 60))));\n\n      return setSession(nextTick);\n      \n    },\n    isTimerRunning ? 1000 : null  //!! reset to 1000 for final version\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  //when stop is clicked, setSession to null, stop the running timer\n  function stopButtonHandler () {\n    setSession(null);\n    setIsTimerRunning(false);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <Focus \n          focusIncrease = {focusIncrease}\n          focusDecrease = {focusDecrease}\n          focusDuration = {focusDuration}\n          isTimerRunning = {isTimerRunning} \n          />\n        <Break \n          breakIncrease = {breakIncrease}\n          breakDecrease = {breakDecrease}\n          breakDuration = {breakDuration}\n          isTimerRunning = {isTimerRunning} \n          />\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n              className=\"btn-group btn-group-lg mb-2\"\n              role=\"group\"\n              aria-label=\"Timer controls\"\n            >\n            <PlayPauseButtons\n              playPause={playPause}\n              isTimerRunning={isTimerRunning} \n              />\n            <StopButton\n              isTimerRunning={isTimerRunning}\n              stopButtonHandler={stopButtonHandler} \n              />\n          </div>\n        </div>\n      </div>\n      <SessionTimer\n        session = {session}\n        focusDuration = {focusDuration}\n        breakDuration = {breakDuration}\n        isTimerRunning = {isTimerRunning}\n        currentProgress = {progressPercent}\n        />\n    </div>\n  );\n}\n\nexport default Pomodoro;","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}